@using Steema.TeeChart;
@using Steema.TeeChart.Styles;
@using System.IO;
@using ColorCode;

<h3>ChartTable</h3>

@code {

    public string chartName;
    public string title;

    public Task<string> loadAppointmentsChart(string aTitle, string[] sNames, double?[,] aVals,
                                    MultiBars aStack, string[] aLabels, int labelLines,
                                                      int incr)
    {
        {
            //Annual Proposals Received (Total)
            Steema.TeeChart.TChart chartAppointm = new Steema.TeeChart.TChart();

            //chartAppointm.Header.Text = aTitle;

            chartName = "chartApp";
            //chartAppointm.Export.Image.JScript.ChartName = chartName;

            List<string> customCode = new List<string>();

            chartAppointm.Chart.Panning.Allow = Steema.TeeChart.ScrollModes.None;

            //for (int i = aVals.GetLength(0) - 1; i >= 0; i--)  //go backwards for default array order
            for (int i = 0; i < aVals.GetLength(0); i++)
            {
                chartAppointm.Series.Add(new Steema.TeeChart.Styles.Bar());
                for (int j = 0; j < aVals.GetLength(1); j++)
                    if (aVals[i, j] != null)
                        chartAppointm.Series[i].Add(aVals[i, j]);
                    else
                        chartAppointm.Series[i].Add(Double.NaN);
                chartAppointm.Series[i].Title = sNames[i];
                chartAppointm.Series[i].Marks.Visible = false;
                ((Bar)chartAppointm.Series[i]).Pen.Visible = false;
                ((Bar)chartAppointm.Series[i]).MultiBar = aStack;
            }

            for (int i = 0; i < aLabels.Length; i++)
                for (int j = 0; j < chartAppointm.Series.Count; j++)
                    chartAppointm.Series[j].Labels.Add(aLabels[i]);

            title = chartAppointm.Series[0].Description;

            chartAppointm.Axes.Left.Increment = incr;
            chartAppointm.Axes.Bottom.Labels.Separation = 0;
            chartAppointm.Legend.Visible = false;

            chartAppointm.Export.Image.JScript.DoFullPage = false;

            chartAppointm.Export.Image.JScript.ChartName = chartName;
            chartAppointm.Export.Image.JScript.CanvasName = "canvas1";

            customCode.Add("   drawAppointments(" + chartAppointm.Export.Image.JScript.ChartName + ", " + labelLines + ");");


            chartAppointm.Export.Image.JScript.CustomCode = customCode.ToArray();

            System.IO.MemoryStream resultStream = new System.IO.MemoryStream();
            chartAppointm.Export.Image.JScript.Width = 590;
            chartAppointm.Export.Image.JScript.Height = 370;
            chartAppointm.Export.Image.JScript.Save(resultStream);

            resultStream.Position = 0;

            StreamReader reader = new StreamReader(resultStream);
            //setup our chart name, here 'dynoChartName'.
            string result = "<script> var " + chartName + "; " + reader.ReadToEnd() + "</script>";

            return Task.FromResult(result);

        }
    }

    public string getChartCode() //for showcode page
    {
        string strContents = TeeChartOnBlazor.Utils.getResource("apptChStr.txt");

        var formatter = new HtmlFormatter();
        var html = formatter.GetHtmlString(strContents, Languages.CSharp);
        return html;
    }

    public string getJSCode() //for showcode page
    {
        string strContents = TeeChartOnBlazor.Utils.getResource("apptJStr.txt");

        var formatter = new HtmlFormatter();
        var html = formatter.GetHtmlString(strContents, Languages.JavaScript);
        return html;

    }

}

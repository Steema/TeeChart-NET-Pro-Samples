@page "/chartpanel/{ctype}"

@using Steema.TeeChart.Styles;
@using ColorCode;
@using System.Resources;
@using System.IO;

<h3>
    @((MarkupString)(title))
</h3>

<br />
<br />

@((MarkupString)(supportUnit))
@((MarkupString)(chartResize))

<div class="tab">
    <button class="tablinks" onclick="viewCode(event, 'Example')">Example</button>
    <button class="tablinks" onclick="viewCode(event, 'Source')">Source</button>
</div>

<!-- Tab content -->
<div id="Example" class="tabcontent">

    <canvas id="canvas1" width="1400" height="500" style="border: 0px solid #808080;">
        This browser does not seem to support HTML5 Canvas.
    </canvas>

</div>

<div id="Source" class="tabcontent">
    <br />
    @((MarkupString)chartCode)
</div>


@((MarkupString)chartJS)


@code {
    String chartImage;
    String chartJS;
    String chartCode;
    String chartResize;
    String supportUnit;
    string chartName;
    string title;

    [Parameter]
    public string CType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        int chartType = Convert.ToInt32(CType);

        if ((chartType == 31) || (chartType == 32)) //pie, donut
        {
            GetGeneralChart cGen = new GetGeneralChart();
            chartJS = await cGen.GetJSChart(chartType, 1400, 500);
            chartName = cGen.chartName;
            chartCode = cGen.getFormattedCode();

            title = cGen.title;

            supportUnit = "<script src=\"js/pieplus.js\" type=\"text/javascript\"></script>";
        }
        else if (chartType == 101) //appointments, advanced chart
        {

            //title
            string aTitle = "Appointments";
            //Year labels
            string[] xLabels = new string[] { "2019", "2020", "2021", "2022", "2023" };
            //Series names
            string[] sNames = new string[] { "Ancillaries", "Core staff" };
            //Chart data
            double?[,] apptData = new double?[,] {
                            { /*Ancillaries*/ 10,12,31,34,16 },
                            { /*Core*/ 5,7,12,12,3 }};

            MultiBars stack = MultiBars.Stacked;
            int incr = 5; //left axis increment


            ChartTable cGen = new ChartTable();
            chartJS = await cGen.loadAppointmentsChart(aTitle, sNames, apptData,
                                       stack, xLabels, newLineLabel(xLabels),
                                       incr);

            title = aTitle;

            //Make the sourcecode reference page.
            chartCode = "\n<h3>Setup data</h3>";
            chartCode += getAppointmentsCode();
            chartCode += "\n<h3>Chart generation</h3>";
            chartCode += cGen.getChartCode();
            chartCode += "\n<h3>Javascript Legend code</h3>";
            chartCode += cGen.getJSCode();

            supportUnit = "<script src=\"js/appointment.js\" type=\"text/javascript\"></script>";

        }
        else  //if (chartType < 30) //general charts
        {
            GetGeneralChart cGen = new GetGeneralChart();
            chartJS = await cGen.GetJSChart(chartType, 1400, 500);
            chartName = cGen.chartName;

            chartCode = cGen.getFormattedCode();

            if ((chartType == 34) || (chartType == 33)) //custom gauge
            {
                supportUnit = "<script src=\"js/gauge.js\" type=\"text/javascript\"></script>";
                if (chartType == 34)
                    title = "VU Meter - analogue type";
            }
            else
            {
                supportUnit = "<script src=\"js/stdsetup.js\" type=\"text/javascript\"></script>";
                title = cGen.title;
            }
        }

        chartResize = "<script> function resizeChart() { resizeC(" + chartName + "); } </script>";
    }

    string getAppointmentsCode()
    {
        string strContents = TeeChartOnBlazor.Utils.getResource("apptStr.txt");

        var formatter = new HtmlFormatter();
        var html = formatter.GetHtmlString(strContents, Languages.CSharp);
        return html;

    }

    private int newLineLabel(string[] labels)
    {
        int result = 0, tmpResult = 0;
        char ch = '\n';

        foreach (string s in labels)
        {
            tmpResult = s.Count(f => (f == ch));
            if (tmpResult > result)
                result = tmpResult;
        }
        return result;
    }

}

@using System.IO;
@using Steema.TeeChart;
@using Microsoft.JSInterop
@inject IJSRuntime JS

@inject BlazorAppSRvNET6.Data.UtilService aUtils;

@((MarkupString)(chartImage))
@((MarkupString)(canvasJS))

<!--<p>Click on the series points in the bottom, javascript chart, to see how callback events converse with the server.</p>-->

@code {

  [Parameter]
  public string ChartTitle { get; set; }

  [Parameter]
  public string Type { get; set; }

  [Parameter]
  public string XValues { get; set; }

  [Parameter]
  public string YValues { get; set; }

  [Parameter]
  public string id { get; set; }

  public double KeyCode;

  String chartImage;
  String canvasJS;
  String chartJS;
  string canvasName = "canvas1";
  Steema.TeeChart.TChart tChart;

  string remaining;
  string contentSecKey;
  string contentCntKey;

  private DotNetObjectReference<TeeChart>? _objRef;

  protected override void OnInitialized()
  {
    canvasName = System.Guid.NewGuid().ToString();

    int aWidth = 900;
    int aHeight = 300;

    CreateChart(aWidth, aHeight);

    if (Type == "js")
    {
      string canvasStr = "<div><canvas id='" + canvasName + "' width='" + aWidth + "' height='" + aHeight + "' style='border: 1px solid #808080;'>";
      canvasStr += "This browser does not seem to support HTML5 Canvas.";
      canvasStr += "</canvas></div>";

      canvasJS = canvasStr;
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    //set the clientside reference for this live instance
    await BundleAndSendDotNetHelper();

    if (Type == "js")
      UpdateJS(900, 300);
  }

  private async Task BundleAndSendDotNetHelper()
  {
    _objRef = DotNetObjectReference.Create(this);
    if (JS != null)
    {
      await JS.InvokeAsync<string>("SetDotNetHelper", _objRef);
    }
  }

  public void Dispose()
  {
    _objRef?.Dispose();
  }

  // **** static response (optional methods) *******
  public static string setThingsStatic(string aVal, string yVal)
  {
    return (Convert.ToInt16(aVal) * 2).ToString();
  }

  [JSInvokable]
  public static async Task<string> ReturnArrayAsyncStatic(string aVal, string yVal){
    return await Task.FromResult(setThingsStatic(aVal, yVal));
  }
  // **** end static response *******

  // **** instance response *******
  public string setThings(string aVal, string yVal)
  {
    //could use index to create a drilldown chart.
    int idx = Array.BinarySearch(tChart[0].XValues.Value, Convert.ToDouble(aVal));

    tChart.Header.Text = "Retrieved serverside Label for the clicked Point: '" + getLabel(idx) + "'. The serverside instance Y Value increased by 5.";

    tChart[0].YValues.Value[idx] = tChart[0].YValues.Value[idx] + 5;
    StateHasChanged();
    return (Convert.ToInt16(aVal) * 2).ToString();
  }

  [JSInvokable]
  public string ReturnArrayAsync(string aVal, string yVal)
  {
    return setThings(aVal, yVal);
  }
  // **** end instance response *******

  public void UpdateTitle(string ATitle)
  {
    tChart.Header.Text = ATitle;

    if (Type == "svg")
    {
      UpdateSVG();
    }

    StateHasChanged();
  }

  string[] labels = new string[] { "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh" };

  public string getLabel(int idx)
  {
    return labels[idx];
  }

  public void PrepareData(ref double[] xValues, ref double[] yValues)
  {

    string[] xStr = XValues.Split(',');
    string[] yStr = YValues.Split(',');

    xValues = new double[xStr.Length];
    yValues = new double[yStr.Length];

    for (int i = 0; i < xStr.Length; i++)
    {
      xValues[i] = Convert.ToDouble(xStr[i]);
      yValues[i] = Convert.ToDouble(yStr[i]);
    }
  }

  public void CreateChart(int width, int height)
  {
    tChart = new TChart();
    Steema.TeeChart.Styles.Bar mBar = new Steema.TeeChart.Styles.Bar();
    tChart.Header.Text = ChartTitle;

    tChart.Width = width;
    tChart.Height = height;

    tChart.Legend.Visible = false;

    if (tChart.Series.Count == 0)
      tChart.Series.Add(mBar);

    mBar.Clear();
    mBar.Marks.Transparent = true;

    mBar.BarWidthPercent = 20;

    double[] xValues = new double[0];
    double[] yValues = new double[0];

    PrepareData(ref xValues, ref yValues);

    mBar.Add(xValues, yValues);

    tChart.Axes.Left.Title.Text = "ºC";
    tChart.Axes.Left.Increment = 10;

    if (Type == "svg")
      UpdateSVG();
  }

  public void UpdateSVG()
  {
    //create svg chart
    MemoryStream ms = new MemoryStream();
    tChart.Export.Image.SVG.Width = tChart.Width;
    tChart.Export.Image.SVG.Height = tChart.Height;
    tChart.Export.Image.SVG.Save(ms);

    ms.Position = 0;

    StreamReader reader = new StreamReader(ms);

    string result = "<svg width=\"" + tChart.Width + "\"px height=\"" + tChart.Height + "px\">" + reader.ReadToEnd() + "</svg>";

    result = result.Replace("\r\n", "");

    chartImage = "<div><p>" + result + "</p></div>";
  }

  public async void UpdateJS(int width, int height)
  {
    //create javascript chart
    string chartName = "aChart";

    tChart.Export.Image.JScript.ChartName = chartName;

    tChart.Zoom.Direction = ZoomDirections.Horizontal;
    tChart.Chart.Panning.Allow = ScrollModes.Horizontal;

    tChart.Footer.Text = "Click on the series points to see how callback events converse with the server.";
    tChart.Footer.Visible = true;
    tChart.Footer.Font.Size = 10;
    tChart.Footer.Font.Name = "Arial";

    MemoryStream ms = new MemoryStream();
    tChart.Export.Image.JScript.Width = width;
    tChart.Export.Image.JScript.Height = height;
    tChart.Export.Image.JScript.CanvasName = canvasName;
    tChart.Export.Image.JScript.DoFullPage = false; //inline, no page <html> header tags

    var customCode = new List<string>();

    customCode.Add("  loadExtras(" + chartName + ",'" + canvasName + "');");
    //customCode.Add("  loadExtras(" + chartName + ");");
    customCode.Add("  resize(" + chartName + ");");

    // **** code to provoke callback to server to retrieve point label and increase its value ***********
    customCode.Add(  chartName + ".series.items[0].onclick = function(series, index, x, y) {");
    customCode.Add("    var xValue = series.data.x ? series.data.x[index].toFixed(0) : index.toFixed(0);");
    customCode.Add("    var yValue = series.data.values[index].toFixed(0)");
    customCode.Add("    isValSet = 0;");
    customCode.Add("    returnArrayAsync(xValue,yValue);");
    customCode.Add("  }");
    // **** end callback code call ********

    /*
    //alternative click code to setup a detailed message label over clicked point.
    customCode.Add("  var annot = new Tee.Annotation(" + chartName + ");");
    customCode.Add("  annot.position.x = 15;");
    customCode.Add("  annot.position.y = 20;");
    customCode.Add("  " + chartName + ".tools.add(annot);");

    customCode.Add(  chartName + ".series.items[0].onclick = function(series, index, x, y) {");
    customCode.Add("    var xValue = series.data.x ? series.data.x[index].toFixed(0) : index.toFixed(0);");
    customCode.Add("    isValSet = 0;");
    customCode.Add("    let vals = returnArrayAsync(xValue,'4');");
    //customCode.Add("    pausecomp(vals);");
    customCode.Add("   annot.text = 'Clicked point: ' + index + '\\nX: ' + xValue + '\\nValue: ' + series.data.values[index].toFixed(series.decimals));
    customCode.Add("    var p = new Tee.Point();");
    customCode.Add("  " + chartName + ".series.items[0].calc(index, p); ");
    customCode.Add("    annot.moveTo(p.x - annot.bounds.width / 2, p.y - annot.bounds.height);");
    customCode.Add("    " + chartName + ".draw();");
    customCode.Add("  }");
    */

    tChart.Export.Image.JScript.CustomCode = customCode.ToArray();

    tChart.Export.Image.JScript.Save(ms);

    ms.Position = 0;

    StreamReader reader = new StreamReader(ms);

    string result = "var " + chartName + "; " + reader.ReadToEnd();

    chartJS = result;

    string aKey = aUtils.KeyCode; //Pass unique, current load nonce CSP key to js load.

    await JS.InvokeVoidAsync("loadChart", chartJS, aKey);
  }
}